openapi: 3.1.0
info:
  title: Pet Store API
  description: API for managing pets in a pet store
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /pets:
    get:
      summary: Get all pets
      operationId: getAllPets
      security: []
      responses:
        "200":
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pet"
        "400":
          description: Bad request - invalid query or format
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - insufficient permissions
        "500":
          description: Internal server error

    post:
      summary: Create a new pet
      operationId: createPet
      security:
        - googleOAuth: [admin]
      requestBody:
        description: Pet object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "201":
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad request - invalid data format or missing fields
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - not allowed to create resource
        "409":
          description: Conflict - duplicate entry or ID already exists
        "500":
          description: Internal server error

  /pets/{id}:
    get:
      summary: Get a pet by ID
      operationId: getPetById
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pet to return
          schema:
            type: string
          x-displayName: ID
      responses:
        "200":
          description: Pet found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad request - invalid ID format
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - access denied
        "404":
          description: Pet not found
        "500":
          description: Internal server error

    put:
      summary: Update a pet by ID
      operationId: updatePet
      security:
        - googleOAuth: [admin]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pet to update
          schema:
            type: string
          x-displayName: ID
      requestBody:
        description: Updated pet object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        "200":
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pet"
        "400":
          description: Bad request - invalid ID or body
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - not allowed to update
        "404":
          description: Pet not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a pet by ID
      operationId: deletePet
      security:
        - googleOAuth: [admin]
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the pet to delete
          schema:
            type: string
          x-displayName: ID
      responses:
        "204":
          description: Pet deleted successfully - no content
        "400":
          description: Bad request - invalid ID
        "401":
          description: Unauthorized - authentication required
        "403":
          description: Forbidden - not allowed to delete
        "404":
          description: Pet not found
        "500":
          description: Internal server error

  /auth/login:
    post:
      summary: Authenticate and register user if not present
      operationId: login
      security: [ ]
      parameters:
        - name: Authorization
          in: header
          required: true
          description: Bearer token obtained from Google OAuth (e.g., "Bearer eyJhbGci...")
          schema:
            type: string
      responses:
        "200":
          description: Authenticated user returned successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid or missing token
        "500":
          description: Internal server error

components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: string
          description: ID of the pet
          x-displayName: ID
        name:
          type: string
          description: Name of the pet
          x-displayName: Name
        species:
          type: string
          description: Species of the pet
          x-displayName: Species
        description:
          type: string
          description: Description of the pet
          x-displayName: Description
        imageURL:
          type: string
          description: Image of the pet
          x-displayName: Image URL

    User:
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
        name:
          type: string
        role:
          type: string

  securitySchemes:
    googleOAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            guest: "Access as a guest (no authentication required)"
            user: "Registered user access"
            admin: "Administrator access"
